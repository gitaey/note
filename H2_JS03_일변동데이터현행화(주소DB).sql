/*-----------------------------------------------------------------
 일변동 데이터 현행화
1) 일변동용 임시테이블 데이타 삭제
2) 현행화 대상일자 파일로 부터 데이터 업로드
3) 업로드된 데이터의 변동구분에 따라 생성, 수정, 삭제처리
-----------------------------------------------------------------*/

/* 주소DB_도로명코드 */
DELETE FROM JS_RNCODE_TEMP;
INSERT INTO JS_RNCODE_TEMP SELECT * FROM CSVREAD('D:\JusoData\Juso_Daily\AlterD.JUSUMT.20180702.MATCHING_ROAD.txt', 'ROAD_NEW_CD|RN|RN_ENG|EMD_NO|CTP_KOR_NM|CTP_ENG_NM|SIG_KOR_NM|SIG_ENG_NM|EMD_KOR_NM|EMD_ENG_NM|EMD_SE|EMD_CD|USE_YN|MVM_RES_CD|AFTCH_INFO|NTFC_DE|ERSR_DE' , 'charset=CP949 fieldSeparator=|');
COMMIT;

/* 주소DB_주소 */
DELETE FROM JS_JUSO_TEMP;
INSERT INTO JS_JUSO_TEMP SELECT * FROM CSVREAD('D:\JusoData\Juso_Daily\AlterD.JUSUMT.20180702.MATCHING_JUSO.txt', 'BD_MGT_SN|ROAD_NEW_CD|EMD_NO|BULD_SE_CD|BULD_MNNM|BULD_SLNO|BSI_ZON_NO|MVM_RES_CD|NTFC_DE|BF_JUSO|ADRDC_YN' , 'charset=CP949 fieldSeparator=|');
COMMIT;

/* 주소DB_지번 */
DELETE FROM JS_JIBUN_TEMP;
INSERT INTO JS_JIBUN_TEMP SELECT * FROM CSVREAD('D:\JusoData\Juso_Daily\AlterD.JUSUMT.20180702.MATCHING_JIBUN.txt', 'BD_MGT_SN|BD_SEQ|ADM_CD|CTP_KOR_NM|SIG_KOR_NM|EMD_KOR_NM|LI_KOR_NM|MNTN_YN|LNBR_MNNM|LNBR_SLNO|JIBERN_GB|MVM_RES_CD' , 'charset=CP949 fieldSeparator=|');
COMMIT;

/* 주소DB_부가정보 */
DELETE FROM JS_ADDINFO_TEMP;
INSERT INTO JS_ADDINFO_TEMP SELECT * FROM CSVREAD('D:\JusoData\Juso_Daily\AlterD.JUSUMT.20180702.MATCHING_ADDINFO.txt', 'BD_MGT_SN|HEMD_CD|HEMD_NM|ZIP|ZIP_NO|ZIP_NM|BULD_NM|POS_BUL_NM|BDTYP_CD|MVM_RES_CD' , 'charset=CP949 fieldSeparator=|');
COMMIT;


/*----------------------------------[주소DB] 갱신---------------------------------- */

/* 1. 주소_도로명코드 */
MERGE INTO JS_RNCODE (ROAD_NEW_CD, RN, RN_ENG, EMD_NO, CTP_KOR_NM, CTP_ENG_NM, SIG_KOR_NM, SIG_ENG_NM, EMD_KOR_NM, EMD_ENG_NM, EMD_SE, EMD_CD, USE_YN, MVM_RES_CD, AFTCH_INFO, NTFC_DE, ERSR_DE)
KEY (ROAD_NEW_CD, EMD_NO)
SELECT ROAD_NEW_CD, RN, RN_ENG, EMD_NO, CTP_KOR_NM, CTP_ENG_NM, SIG_KOR_NM, SIG_ENG_NM, EMD_KOR_NM, EMD_ENG_NM, EMD_SE, EMD_CD, USE_YN, MVM_RES_CD, AFTCH_INFO, NTFC_DE, ERSR_DE
  FROM JS_RNCODE_TEMP;

/* 2-1. 주소 UPDATE */
MERGE INTO JS_JUSO (BD_MGT_SN, ROAD_NEW_CD, EMD_NO, BULD_SE_CD, BULD_MNNM, BULD_SLNO, BSI_ZON_NO, MVM_RES_CD, NTFC_DE, BF_JUSO, ADRDC_YN)
KEY (BD_MGT_SN)
SELECT BD_MGT_SN, ROAD_NEW_CD, EMD_NO, BULD_SE_CD, BULD_MNNM, BULD_SLNO, BSI_ZON_NO, MVM_RES_CD, NTFC_DE, BF_JUSO, ADRDC_YN
         FROM JS_JUSO_TEMP
        WHERE MVM_RES_CD IN ('31', '34', '73');

/* 2-2. 주소 삭제 (DELETE) */
DELETE FROM JS_JUSO A
 WHERE BD_MGT_SN IN
       (SELECT BD_MGT_SN
          FROM JS_JUSO_TEMP B 
         WHERE B.MVM_RES_CD = '63');
				  
/* 3-1. 지번 MERGE */
MERGE INTO JS_JIBUN (BD_MGT_SN ,BD_SEQ ,ADM_CD ,CTP_KOR_NM ,SIG_KOR_NM ,EMD_KOR_NM ,LI_KOR_NM ,MNTN_YN ,LNBR_MNNM ,LNBR_SLNO ,JIBERN_GB)
KEY (BD_MGT_SN, BD_SEQ)
SELECT BD_MGT_SN ,BD_SEQ ,ADM_CD ,CTP_KOR_NM ,SIG_KOR_NM ,EMD_KOR_NM ,LI_KOR_NM ,MNTN_YN ,LNBR_MNNM ,LNBR_SLNO ,JIBERN_GB
  FROM JS_JIBUN_TEMP
 WHERE MVM_RES_CD IN ('31', '34', '73');
		
/* 3-2. 지번 DELETE 
  H2 DB에서 EXISTS 구문 사용 시 구문 오류를 리턴하지는 않으나, 속도가 매우 늦거나 멈춤.
  PK 항목에 IN 조건을 쓰는것이 속도가 빠름. 
  단 H2에서 IN 조건이 단일 컬럼용 조건으로 사용되므로 결합인덱스 지번 테이블은 경우 아래와 같이 처리함*/
DELETE FROM JS_JIBUN A
 WHERE (BD_MGT_SN) IN (SELECT BD_MGT_SN FROM JS_JIBUN_TEMP B WHERE  B.MVM_RES_CD = '63')
   AND (BD_MGT_SN||'-'||LPAD(BD_SEQ,3,'0')) IN (SELECT BD_MGT_SN||'-'||LPAD(BD_SEQ,3,'0') FROM JS_JIBUN_TEMP B  WHERE  B.MVM_RES_CD = '63');
				  
/* 4-1. 부가정보 MERGE */
MERGE INTO JS_ADDINFO (BD_MGT_SN, HEMD_CD, HEMD_NM, ZIP, ZIP_NO, ZIP_NM, BULD_NM, POS_BUL_NM, BDTYP_CD)
KEY (BD_MGT_SN)
SELECT BD_MGT_SN, HEMD_CD, HEMD_NM, ZIP, ZIP_NO, ZIP_NM, BULD_NM, POS_BUL_NM, BDTYP_CD
         FROM JS_ADDINFO_TEMP
        WHERE MVM_RES_CD IN ('31', '34', '73');

/* 4-2. 부가정보 DELETE */
DELETE FROM JS_ADDINFO A
 WHERE (BD_MGT_SN) IN 
       (SELECT BD_MGT_SN
          FROM JS_ADDINFO_TEMP B 
         WHERE B.MVM_RES_CD = '63');

COMMIT;
